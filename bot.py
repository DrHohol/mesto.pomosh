from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
from keyboards import Buttons, Keyboard
from states import States
import database.controller as controller
from datetime import datetime
from database.models import Drive
from utils import generate_info
import os

load_dotenv()

bot = Bot(token=os.environ.get("TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=["help", "start"], state="*")
async def hello(message: types.Message):
    get_or_create_user(message.from_user.id)
    await message.answer("""
–ü—Ä–∏–≤—ñ—Ç üëã
–Ø –±–æ—Ç "–ú—ñ—Å—Ü–µ –¥–æ–ø–æ–º–æ–≥–∏"
–ú–æ—ó —Ç–≤–æ—Ä—Ü—ñ –ø—Ä–æ—Å—è—Ç—å –≤–∞—Å –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –æ–¥–∏–Ω –æ–¥–Ω–æ–º—É –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ. –†–∞–∑–æ–º –º–∏ –ø–µ—Ä–µ–º–æ–∂–µ–º–æüí™üá∫üá¶

–Ø –∑–Ω–∞—Ö–æ–¥–∂—É –ª—é–¥–µ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –µ–≤–∞–∫—É–∞—Ü—ñ—î—é –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ —à—É–∫–∞—î —Å–ø–æ—Å—ñ–± –µ–≤–∞–∫—É—é–≤–∞—Ç–∏—Å—è üôè

‚ùóÔ∏è –ë—É–¥—å—Ç–µ –ø–∏–ª—å–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤–µ—Ä—è–π—Ç–µ –≤–æ–¥—ñ—ó–≤ –ø–µ—Ä–µ–¥ —Å–æ–≥–ª–∞—Å—É–≤–∞–Ω–Ω—è–º –ø–æ—ó–∑–¥–∫–∏ ‚ùóÔ∏è""")

    await message.answer("–©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?",
                         reply_markup=Keyboard.role_menu)


@dp.message_handler(Text(equals="–ú–æ—ó –ø–æ—ó–∑–¥–∫–∏"), state='*')
async def my_drives(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    user = controller.get_or_create_user(message.from_user.id)[0]
    print(user.id)
    drives = controller.get_drive_by({Drive.driver_id: user.id})
    for drive in drives:
        await message.answer(generate_info(drive),
                             reply_markup=Buttons.edit_drive_button(drive.id))
    del drives
    #drives = Controller.get_drives


@dp.message_handler(state=States.set_name)
async def choose_role(message: types.Message, state: FSMContext):
    user = controller.get_or_create_user(
        message.from_user.id)[0]

    if not user.contact_info:
        async with state.proxy() as data:
            data['name'] = message.text
            data['uid'] = message.from_user.id
        await States.set_number.set()
        await message.answer("üìû –Ø–∫ –∑ –≤–∞–º–∏ –º–æ–∂–Ω–∞ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å?")
    else:
        await message.answer('i–Ω—Ñ–æ—Ä–º–∞—Üi—é –æ–Ω–æ–≤–ª–µ–Ω–æ')
        controller.edit_user(user,
                             {'name': message.text})
        await state.finish()


@dp.message_handler(state=States.set_number)
async def choose_role(message: types.Message, state: FSMContext):
    #user = Controller.user_exist()
    async with state.proxy() as data:
        data['phone_number'] = message.text
    await States.set_number.set()
    await message.answer(f"""
–í–∞—ài –¥–∞–Ω–Ωi:
I–º'—è: {data['name']}
–°–ø–æ—Åi–± –∑–≤'—è–∑–∫—É: {data['phone_number']}""",
            reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))
    controller.edit_user(controller.get_or_create_user(data['uid'])[0],
                         {'name': data['name'], 'contact_info': data['phone_number']})
    await state.finish()
""" For driver """


@dp.message_handler(Text(equals="–ù–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"), state='*')
async def set_driver_menu(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    if controller.get_or_create_user(message.from_user.id)[1]:
        await message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–≤–µ–¥i—Ç—å i–Ω—Ñ–æ—Ä–º–∞—Üi—é –ø—Ä–æ —Å–µ–±–µ. –ü–æ—á–Ω–µ–º–æ –∑ i–º'—è:")
        await States.set_name.set()
    else:
        await message.answer("–î–æ–±—Ä–µ! –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))


@dp.message_handler(Text(equals="–î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"), state="*")
async def set_driver_menu(message: types.Message, state: FSMContext):
    await message.answer("""
üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –∑ —è–∫–æ–≥–æ –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∑–¥–∂–∞—Ç–∏, —â–æ–± –ª—é–¥–∏ –ø–æ—Ä—É—á –∑–º–æ–≥–ª–∏ –≤–∞—Å –∑–Ω–∞–π—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ –º–∞—î –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä üëá""",
                         reply_markup=Buttons.select_region())
    await States.from_drive.set()


@dp.callback_query_handler(state=States.from_drive)
async def choose_role(callback_query: types.CallbackQuery, state: FSMContext):
    #user = Controller.user_exist()
    print("–•–£–õ–ò –ù–ï –†–ê–ë–û–¢–ê–¢")
    async with state.proxy() as data:
        data['drive_from'] = callback_query.data
    await States.to_drive.set()
    await callback_query.message.edit_text("""
        üìç –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º, –∫—É–¥–∏ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏ 

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –±–∞–∂–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±—Å–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä. –¢–æ—á–Ω–µ –º—ñ—Å—Ç–æ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µüëá""",
                                           reply_markup=Buttons.select_region())
    await callback_query.answer()


@dp.callback_query_handler(state=States.to_drive)
async def choose_role(callback_query: types.CallbackQuery, state: FSMContext):
    #user = Controller.user_exist()
    async with state.proxy() as data:
        if data.get('editing'):
            controller.edit_drive(
                data['current_drive'],
                {'place_from': Buttons.regions[int(data['drive_from'])],
                 'place_to': Buttons.regions[int(callback_query.data)]})
            await callback_query.message.edit_text(
                "–ú–∞—Ä—à—Ä—É—Ç –∑–ºi–Ω–µ–Ω–∏–π", reply_markup=None)
            await state.finish()
        else:
            data['drive_to'] = callback_query.data
            await callback_query.message.answer("üë´ –û–±–µ—Ä—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Äi–≤, —è–∫–∏—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ –∑ —Å–æ–±–æ—éüëá")
            await callback_query.answer()
            await States.max_pass.set()


@dp.message_handler(state=States.max_pass)
async def set_driver_menu(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() and int(message.text) >= 1:
            if data.get('editing'):
                controller.edit_drive(
                    data['current_drive'],
                    {'max_passengers_amount': int(message.text)})
                await message.answer('–ì–æ—Ç–æ–≤–æ')
                await state.finish()
            else:
                data['max_pass'] = int(message.text)
                await message.answer("""üì£ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

–ó–∞–ª–∏—à—Ç–µ –±—É–¥—å-—è–∫—É –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é:

- –≤–∞—à–µ —ñ–º‚Äô—è
- —á–∏ –º–æ–∂–Ω–∞ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏ üê∂
- –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–≥–∞–∂—É –Ω–∞ –æ–¥–Ω–æ–≥–æ —á–æ–ª–æ–≤—ñ–∫–∞ üß≥
- –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏ üí∞
- –±—É–¥—å-—è–∫—É —ñ–Ω—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
""")
                await States.comment.set()
        else:
            await message.answer("–ü–æ–º–∏–ª–∫–∞. –ú–æ–∂–Ω–∞ –ª–∏—à–µ —á–∏—Å–ª–∞ >= 1")


@dp.message_handler(state=States.comment)
async def set_date(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data.get('editing'):
            controller.edit_drive(
                data['current_drive'],
                {'comment': message.text})
            await message.answer('–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await state.finish()
        else:
            data['comment'] = message.text
            await message.answer("""
üïí –î–∞—Ç–∞ —Ç–∞ —á–∞—Å

–ù–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å, –æ –∫–æ—Ç—Ä—ñ–π –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ñ–∑–¥–∂–∞—Ç–∏ –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º. 

–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: 20.03.22 14:30""")
            await States.date.set()


@dp.message_handler(state=States.date)
async def add_drive(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['date'] = datetime.strptime(message.text, "%d.%m.%y %H:%M")
            if data.get('editing'):
                controller.edit_drive(data['current_drive'],
                                      attrs={'departure_time': data['date']})
                await message.answer(f'–î–∞—Ç–∞ –∑–ºi–Ω–µ–Ω–∞. –ù–æ–≤–∞ –¥–∞—Ç–∞: {data["date"]}')
                await state.finish()
                del data['editing']
            else:
                await message.answer(f"""
‚úÖ –í–∞—à–∞ –ø–æ—ó–∑–¥–∫–∞ –ø—Ä–æ –¥–æ–ø–æ–º–æ–≥—É —Å—Ç–≤–æ—Ä–µ–Ω–∞

üìç –ú–∞—Ä—à—Ä—É—Ç: {Buttons.regions[int(data['drive_from'])]} ‚Üí {Buttons.regions[int(data['drive_to'])]}
üïí –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {data['date']}
üë´ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å: {data['max_pass']}
üì¢ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {data['comment']}

–î—è–∫—É—î–º–æ –≤–∞–º üôè""")
                controller.create_drive(Buttons.regions[int(data['drive_from'])],
                                        Buttons.regions[int(data['drive_to'])],
                                        message.from_user.id,
                                        data['max_pass'],
                                        data['date'],
                                        data['comment'])
                await send_notify(data)
                await state.finish()
        except Exception as e:
            print(e)
            await message.answer(f"–£–ø—Å, –≤–∏ –Ω–µ –≤—ñ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —ñ –∑–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–≥—ñ–¥–Ω–æ –ø—Ä–∏–∫–ª–∞–¥—Éüëá")


async def send_notify(data):
    users = controller.get_user_by(
        Buttons.regions[int(data['drive_from'])],
        Buttons.regions[int(data['drive_to'])],
        data['max_pass'])
    print(users)
    if users:
        for user in users:
            await bot.send_message(
                user.chat_id,
                text=f"""–ü–æ—ó–∑–¥–∫–∞ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –Ω–∞:{data['date']}
–ü–æ—á–∞—Ç–∫–æ–≤—ã–π –ø—É–Ω–∫—Ç: {Buttons.regions[int(data['drive_from'])]}
–öi–Ω–µ—á–Ω–∏–π –ø—É–Ω–∫—Ç: {Buttons.regions[int(data['drive_to'])]}
–ü–∞—Å–∞–∂–∏—Äi–≤: {data['max_pass']}
–ö–æ–º–µ–Ω—Ç–∞—Ä: {data['comment']}""")
    # print(users[0].name)


@dp.callback_query_handler(Text(startswith="del"), state="*")
async def delete_drive(callback_query: types.CallbackQuery, state: FSMContext):
    drive_id = callback_query.data.split('_')[1]
    controller.delete_drive(controller.get_drive_by(
        {Drive.id: drive_id})[0])
    await callback_query.message.edit_text("–í–∏–¥–∞–ª–µ–Ω–æ")
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith="edit"), state="*")
async def edit_drive(callback_query: types.CallbackQuery, state: FSMContext):
    drive_id = callback_query.data.split('_')[1]
    async with state.proxy() as data:
        data['current_drive'] = drive_id
        data['editing'] = True
    await callback_query.message.answer('–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–ºi–Ω–∏—Ç–∏?',
                                        reply_markup=Buttons.edit_menu)
    await callback_query.answer()


@dp.callback_query_handler(Text(equals='date_edit'))
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–∫–∞–∂i—Ç—å –¥–∞—Ç—É —É\
—Ñ–æ—Ä–º–∞—Çi –î–î.–ú–ú.–†–† –ì–ì:–•–•")
    await States.date.set()


@dp.callback_query_handler(Text(equals='route'), state="*")
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ó–≤i–¥–∫i –ø—Ä—è–º—É–µ—Ç–µ",
                                           reply_markup=Buttons.select_region())
    await States.from_drive.set()


@dp.callback_query_handler(Text(equals='com_edit'), state="*")
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ö–æ–º–º–µ–Ω—Ç")
    await States.comment.set()


@dp.callback_query_handler(Text(equals='pass_count'), state="*")
async def edit_pass_count(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–∫i–ª—å–∫i—Å—Ç—å –ø–∞—Å—Å–∞–∂–∏—Äi–≤")
    await States.max_pass.set()

'''For user'''


@dp.message_handler(Text(equals="–®—É–∫–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"), state="*")
async def passenger_menu(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    await message.answer("""
‚ö†Ô∏è –ù–ï –ù–ê–î–°–ò–õ–ê–ô–¢–ï –ü–ï–†–ï–î–û–ü–õ–ê–¢–£ ‚ö†Ô∏è
–ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, –º–∞–π–∂–µ —É—Å—ñ –ø–µ—Ä–µ–≤–æ–∑—á–∏–∫–∏ –±–µ—Ä—É—Ç—å –∫–æ—à—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏ –≥–æ—Ç—ñ–≤–∫–æ—é üá∫üá¶üí∞""",
        reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))
    user = controller.get_or_create_user(message.from_user.id)[0]
    if not user.place_from:
        await message.answer("""
üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –∑ —è–∫–æ–≥–æ –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∑–¥–∂–∞—Ç–∏, —â–æ–± –ª—é–¥–∏ –ø–æ—Ä—É—á –∑–º–æ–≥–ª–∏ –≤–∞—Å –∑–Ω–∞–π—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ –º–∞—î –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä üëá
""",
                             reply_markup=Buttons.select_region())
        await States.settings_from.set()
    else:

        drives = controller.get_drive_by({
            Drive.place_from: user.place_from,
            Drive.place_to: user.place_to},
            places=user.num_of_passengers)
        for drive in drives:
            await message.answer(
                generate_info(drive))


@dp.callback_query_handler(state=States.settings_from)
async def set_start(callback_query: types.CallbackQuery, state: FSMContext):
    #user = Controller.user_exist()
    async with state.proxy() as data:
        data['drive_from'] = callback_query.data
    await callback_query.message.edit_text("""
üìç –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º, –∫—É–¥–∏ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏ 

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –±–∞–∂–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±—Å–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Äüëá""",
                                           reply_markup=Buttons.select_region(nowhere=True))
    await callback_query.answer()
    await States.settings_to.set()


@dp.callback_query_handler(state=States.settings_to)
async def set_finish(callback_query: types.CallbackQuery, state: FSMContext):

    await callback_query.answer()
    async with state.proxy() as data:
        data['drive_to'] = callback_query.data

    user = controller.get_or_create_user(
        callback_query.from_user.id)[0]
    if user.num_of_passengers:
        controller.edit_user(user,
                             {'place_from': Buttons.regions[int(data['drive_from'])],
                              'place_to': Buttons.regions[int(callback_query.data)]})
        await callback_query.message.edit_text("–û–Ω–æ–≤–ª–µ–Ω–æ!",
                                               reply_markup=Buttons.find)
        await state.finish()

    else:
        await callback_query.message.edit_text("üë´ –°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å –≤ –∞–≤—Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ?üëá",
                                               reply_markup=None)
        await States.settings_pass.set()


@dp.message_handler(state=States.settings_pass)
async def get_drives(message: types.Message, state: FSMContext):

    user = controller.get_or_create_user(message.from_user.id)[0]

    passengers = message.text
    if passengers.isdigit() and int(passengers) >= 1:
        if user.place_from:
            controller.edit_user(user,
                                 {'num_of_passengers': int(message.text)})
            await message.answer("i–Ω—Ñ–æ—Ä–º–∞—Üi—é –æ–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?",
                                 reply_markup=Buttons.find)
            await state.finish()
        else:
            async with state.proxy() as data:
                controller.edit_user(user,
                                     {'place_from': Buttons.regions[int(data['drive_from'])],
                                      'place_to': Buttons.regions[int(data['drive_to'])],
                                      'num_of_passengers': int(message.text)})

            await message.answer("–ò–Ω—Ñ–æ –µ—Å—Ç—å. —â–∞ –ø–æ–¥–±–æ—Ä–∫–∞")
            await state.finish()
            drives = controller.get_drive_by({
                Drive.place_from: Buttons.regions[int(data['drive_from'])],
                Drive.place_to: Buttons.regions[int(data['drive_to'])]},
                places=int(message.text))
            for drive in drives:
                await message.answer(
                    generate_info(drive))
        else:
            await message.answer("–ù–µ–≤i—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ú–æ–∂–Ω–∞ —Çi–ª—å–∫i —Ü–∏—Ñ—Ä–∏ –±i–ª—å—à–µ 0")


@dp.callback_query_handler(Text(equals='find_pass'))
async def choose_role(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user = controller.get_or_create_user(callback_query.from_user.id)[0]
    drives = controller.get_drive_by({
        Drive.place_from: user.place_from,
        Drive.place_to: user.place_to},
        places=user.num_of_passengers)
    await callback_query.message.delete()
    if not drives:
        await bot.send_message(
            callback_query.from_user.id,
            "–ù–∞–∂–∞–ª—å –∑–∞—Ä–∞–∑ –Ω–µ–º–∞ –ø–æ—ó–∑–¥–æ–∫ –¥–ª—è –≤–∞—Å")
    for drive in drives:
        await bot.send_message(
            callback_query.from_user.id,
            generate_info(drive))


@dp.message_handler(Text(equals="–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), state="*")
async def settings(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    await message.answer("–®–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–ºi–Ω–∏—Ç–∏?",
                         reply_markup=Buttons.edit_data_menu)


@dp.message_handler(Text(equals="–ù–æ—Ç–∏—Ñ–∏ –æ –Ω–æ–≤—ã—Ö"), state="*")
async def notify(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    user = controller.get_or_create_user(message.from_user.id)[0]
    print(user.active_search)
    if user.active_search:
        controller.edit_user(user,
                             {'active_search': False})
        await message.answer("–ù–æ—Ç–∏—Ñ–∏ –≤—ã–∫–ª",
                             reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))
    else:
        controller.edit_user(user,
                             {'active_search': True})
        await message.answer("–ù–æ—Ç–∏—Ñ–∏ –≤–∫–ª",
                             reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))


""" Editing user info """


@dp.callback_query_handler(Text(equals='nm_chng'))
async def change_name(callback_query: types.CallbackQuery, state: FSMContext):

    await callback_query.message.answer("–í–≤–µ–¥i—Ç—å –Ω–æ–≤–µ i–º'—è")
    await callback_query.answer()
    await States.set_name.set()


@dp.callback_query_handler(Text(equals='u_count'))
async def change_pass_count(callback_query: types.CallbackQuery):

    await callback_query.message.answer("–í–≤–µ–¥i—Ç—å –°–∫i–ª—å–∫–∏ –≤–∞—Å")
    await callback_query.answer()
    await States.settings_pass.set()


@dp.callback_query_handler(Text(equals='u_from'))
async def change_route_pass(callback_query: types.CallbackQuery):

    await callback_query.message.answer("–û–±–µ—Äi—Ç—å —Ç–æ—á–∫—É –≤–∏i–∑–¥—É",
                                        reply_markup=Buttons.select_region())
    await callback_query.answer()
    await States.settings_from.set()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
