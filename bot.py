from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from dotenv import load_dotenv
from keyboards import Buttons, Keyboard
from states import States
import database.controller as controller
from datetime import datetime
from database.models import Drive
from utils import generate_info
import os

load_dotenv()

bot = Bot(token=os.environ.get("TOKEN"))
dp = Dispatcher(bot, storage=MemoryStorage())


@dp.message_handler(commands=["help", "start"], state="*")
async def hello(message: types.Message):
    controller.get_or_create_user(message.from_user.id)
    await message.answer("""
–ü—Ä–∏–≤—ñ—Ç üëã
–Ø –±–æ—Ç "–ú—ñ—Å—Ü–µ –¥–æ–ø–æ–º–æ–≥–∏"
–ú–æ—ó —Ç–≤–æ—Ä—Ü—ñ –ø—Ä–æ—Å—è—Ç—å –≤–∞—Å –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –æ–¥–Ω–µ –æ–¥–Ω–æ–º—É, –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ, –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω—ñ–π –æ—Å–Ω–æ–≤—ñ. –†–∞–∑–æ–º –º–∏ –ø–µ—Ä–µ–º–æ–∂–µ–º–æ üí™üá∫üá¶

–Ø –∑–Ω–∞—Ö–æ–¥–∂—É –ª—é–¥–µ–π, —è–∫—ñ –º–æ–∂—É—Ç—å –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ –µ–≤–∞–∫—É–∞—Ü—ñ—î—é, –∞–±–æ —Ç–∏—Ö, —Ö—Ç–æ —à—É–∫–∞—î —Å–ø–æ—Å—ñ–± –µ–≤–∞–∫—É—é–≤–∞—Ç–∏—Å—è üôè

‚ùóÔ∏è –ë—É–¥—å—Ç–µ –ø–∏–ª—å–Ω—ñ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –≤–æ–¥—ñ—ó–≤ –ø–µ—Ä–µ–¥ —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è–º –ø–æ—ó–∑–¥–∫–∏ ‚ùóÔ∏è""")

    await message.answer("–©–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ: —à—É–∫–∞—é –¥–æ–ø–æ–º–æ–≥—É / –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ üëá",
                         reply_markup=Keyboard.role_menu)


@dp.message_handler(Text(equals="–ú–æ—ó –ø–æ—ó–∑–¥–∫–∏"), state='*')
async def my_drives(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    user = controller.get_or_create_user(message.from_user.id)[0]
    drives = controller.get_drive_by({Drive.driver_id: user.id})
    if not drives:
        await message.answer("""
            –ó–∞—Ä–∞–∑ —É –≤–∞—Å –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –ø–æ—ó–∑–¥–∫–∏. –ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è" —â–æ–± –∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—ó–∑–¥–∫—É üëá""",
                             reply_markup=Keyboard.menu("–Ø –í–æ–¥—ñ–π"))
    for drive in drives:
        await message.answer(generate_info(drive),
                             reply_markup=Buttons.edit_drive_button(drive.id))
    del drives
    #drives = Controller.get_drives


@dp.message_handler(state=States.set_name)
async def choose_role(message: types.Message, state: FSMContext):
    user = controller.get_or_create_user(
        message.from_user.id)[0]

    if not user.contact_info:
        async with state.proxy() as data:
            data['name'] = message.text
            data['uid'] = message.from_user.id
        await States.set_number.set()
        await message.answer("üìû –Ø–∫ –∑ –≤–∞–º–∏ –º–æ–∂–Ω–∞ –∑–≤‚Äô—è–∑–∞—Ç–∏—Å—å?")
    else:
        await message.answer('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.')
        controller.edit_user(user,
                             {'name': message.text})
        await state.finish()


@dp.message_handler(state=States.set_number)
async def choose_role(message: types.Message, state: FSMContext):
    #user = Controller.user_exist()
    async with state.proxy() as data:
        data['phone_number'] = message.text
    if data.get('editing'):
        controller.edit_user(
            controller.get_or_create_user(message.from_user.id)[0],
            {'contact_info': message.text})
        await state.finish()
        await message.answer("—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ.",
                             reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))
    else:
        await message.answer(f"""
    –í–∞—à—ñ –¥–∞–Ω–Ω—ñ:
    –Ü–º'—è: {data['name']}
    –°–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É: {data['phone_number']}""",
                             reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))
        controller.edit_user(controller.get_or_create_user(data['uid'])[0],
                             {'name': data['name'], 'contact_info': data['phone_number']})
        await state.finish()
""" For driver """


@dp.message_handler(Text(equals="–ù–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"), state='*')
async def set_driver_menu(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    if not controller.get_or_create_user(message.from_user.id)[0].name:
        await message.answer("–©–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≤–≤–µ–¥—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Å–µ–±–µ. –ü–æ—á–Ω–µ–º–æ –∑ —ñ–º'—è:")
        await States.set_name.set()
    else:
        await message.answer("–î–æ–±—Ä–µ! –©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏?", reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))


@dp.message_handler(Text(equals="–î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"), state="*")
async def set_driver_menu(message: types.Message, state: FSMContext):
    await message.answer("""
üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –∑ —è–∫–æ–≥–æ –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏, —â–æ–± –ª—é–¥–∏ –ø–æ—Ä—É—á –∑–º–æ–≥–ª–∏ –≤–∞—Å –∑–Ω–∞–π—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ –º–∞—î –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä üëá""",
                         reply_markup=Buttons.select_region())
    await States.from_drive.set()


@dp.callback_query_handler(state=States.from_drive)
async def choose_role(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data.startswith("page_"):
        page = callback_query.data.split("_")[1]
        await callback_query.message.edit_reply_markup(Buttons.select_region(
            nowhere=False, page=int(page)))
    else:
        async with state.proxy() as data:
            data['drive_from'] = callback_query.data
        await States.to_drive.set()
        await callback_query.message.edit_text("""
üìç –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º, –∫—É–¥–∏ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –±–∞–∂–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä. –¢–æ—á–Ω–µ –º—ñ—Å—Ç–æ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ üëá""",
                                               reply_markup=Buttons.select_region(nowhere=True))
        await callback_query.answer()


@dp.callback_query_handler(state=States.to_drive)
async def choose_role(callback_query: types.CallbackQuery, state: FSMContext):
    #user = Controller.user_exist()
    if callback_query.data.startswith("page_"):
        page = callback_query.data.split("_")[1]
        await callback_query.message.edit_reply_markup(Buttons.select_region(
            nowhere=True, page=int(page)))
    else:
        async with state.proxy() as data:
            if data.get('editing'):
                controller.edit_drive(
                    data['current_drive'],
                    {'place_from': Buttons.regions_from[int(data['drive_from'])],
                     'place_to': Buttons.regions_to[int(callback_query.data)]})
                await callback_query.message.edit_text(
                    "–ú–∞—Ä—à—Ä—É—Ç –∑–º—ñ–Ω–µ–Ω–∏–π", reply_markup=None)
                await state.finish()
            else:
                data['drive_to'] = callback_query.data
                await callback_query.message.answer("üë´ –í–≤–µ–¥—ñ—Ç—å —Ü–∏—Ñ—Ä–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤, —è–∫–∏—Ö –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ –∑ —Å–æ–±–æ—é üëá")
                await callback_query.answer()
                await States.max_pass.set()


@dp.message_handler(state=States.max_pass)
async def set_driver_menu(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text.isdigit() and int(message.text) >= 1:
            if data.get('editing'):
                controller.edit_drive(
                    data['current_drive'],
                    {'max_passengers_amount': int(message.text)})
                await message.answer('–ì–æ—Ç–æ–≤–æ',
                    reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))
                await state.finish()
            else:
                data['max_pass'] = int(message.text)
                await message.answer("""üì£ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è

–ó–∞–ª–∏—à—Ç–µ –±—É–¥—å-—è–∫—É –≤–∞–∂–ª–∏–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∞ –≤–∞—à—É –¥—É–º–∫—É:

–ù–∞–ø—Ä–∏–∫–∞–¥:
- –≤–∞—à–µ —ñ–º‚Äô—è
- –Ω–∞–∑–≤–∞ –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É –∞–±–æ –º—ñ—Å—Ç–∞, –∑–≤—ñ–¥–∫–∏ –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏ üìç
- —á–∏ –º–æ–∂–Ω–∞ –∑ —Ç–≤–∞—Ä–∏–Ω–∞–º–∏ üê∂
- –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–≥–∞–∂—É –Ω–∞ –æ–¥–Ω—É –æ—Å–æ–±—É üß≥
- –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—ó–∑–¥–∫–∏ üí∞
- –±—É–¥—å-—è–∫—É —ñ–Ω—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
""", reply_markup=Keyboard.skip)
                await States.comment.set()
        else:
            await message.answer("–ü–æ–º–∏–ª–∫–∞. –ú–æ–∂–Ω–∞ –ª–∏—à–µ 1 –∞–±–æ –±—ñ–ª—å—à–µ.")


@dp.message_handler(state=States.comment)
async def set_date(message: types.Message, state: FSMContext):
    if message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏":
        message.text = "–í—ñ–¥—Å—É—Ç–Ω—è"
    async with state.proxy() as data:
        if data.get('editing'):
            controller.edit_drive(
                data['current_drive'],
                {'comment': message.text})
            await message.answer('–ö–æ–º–µ–Ω—Ç–∞—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ')
            await state.finish()
        else:
            data['comment'] = message.text
            await message.answer("""
üïí –î–∞—Ç–∞ —Ç–∞ —á–∞—Å

–ù–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å, –æ –∫–æ—Ç—Ä—ñ–π –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏, –∑–∞ –ø—Ä–∏–∫–ª–∞–¥–æ–º, –Ω–∞–≤–µ–¥–µ–Ω–∏–º –Ω–∏–∂—á–µ.

–î–∞—Ç–∞ —Ç–∞ —á–∞—Å: 20.03.2022 14:30""")
            await States.date.set()


@dp.message_handler(state=States.date)
async def add_drive(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data['date'] = datetime.strptime(message.text, "%d.%m.%y %H:%M")
            if data['date'] < datetime.now():
                raise ValueError
            if data.get('editing'):
                controller.edit_drive(data['current_drive'],
                                      attrs={'departure_time': data['date']})
                await message.answer(f'–î–∞—Ç–∞ –∑–º—ñ–Ω–µ–Ω–∞. –ù–æ–≤–∞ –¥–∞—Ç–∞: {data["date"]}')
                await state.finish()
                del data['editing']
            else:
                drive = controller.create_drive(Buttons.regions_from[int(data['drive_from'])],
                                                Buttons.regions_to[int(
                                                    data['drive_to'])],
                                                message.from_user.id,
                                                data['max_pass'],
                                                data['date'],
                                                data['comment'])
                await message.answer(f"""
‚úÖ –í–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –ø–æ—ó–∑–¥–∫–∏ —Å—Ç–≤–æ—Ä–µ–Ω–∞ 

üìç –ú–∞—Ä—à—Ä—É—Ç: {drive.place_from} ‚Üí {drive.place_to}
üïí –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {drive.departure_time.strftime("%d.%m.%y %H:%M")}
üë´ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å: {drive.max_passengers_amount}
üìû –°–ø–æ—Å—ñ–± –∑–≤‚Äô—è–∑–∫—É: {drive.driver.contact_info}
üì¢ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {drive.comment}

–î—è–∫—É—î–º–æ –≤–∞–º üôè""",
                                     reply_markup=Keyboard.menu('–Ø –í–æ–¥—ñ–π'))
                await send_notify(drive)
                await state.finish()
        except Exception as e:
            print(e)
            await message.answer(f"–£–ø—Å, –≤–∏ –Ω–µ –≤—ñ—Ä–Ω–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É —ñ –∑–∞–ø–∏—à—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –∑–≥—ñ–¥–Ω–æ –ø—Ä–∏–∫–ª–∞–¥—É üëá")


async def send_notify(drive):
    users = controller.get_user_by(
        drive.place_from,
        drive.place_to,
        drive.max_passengers_amount)
    print(users)
    if users:
        for user in users:
            await bot.send_message(
                user.chat_id,
                text=f"""
‚úÖ –ó–Ω–∞–π–¥–µ–Ω–∞ –Ω–æ–≤–∞ –ø–æ—ó–∑–¥–∫–∞ –¥–ª—è –≤–∞—Å
üìç –ú–∞—Ä—à—Ä—É—Ç: {drive.place_from} ‚Üí {drive.place_to}
üïí –î–∞—Ç–∞ —Ç–∞ —á–∞—Å: {drive.departure_time.strftime("%d.%m.%y %H:%M")}
üë´ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ—Å—Ü—å: {drive.max_passengers_amount}
üìû –°–ø–æ—Å—ñ–± –∑–≤‚Äô—è–∑–∫—É: {drive.driver.contact_info}
üì¢ –í–∞–∂–ª–∏–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {drive.comment}""")
    # print(users[0].name)


@dp.callback_query_handler(Text(startswith="del"), state="*")
async def delete_drive(callback_query: types.CallbackQuery, state: FSMContext):
    drive_id = callback_query.data.split('_')[1]
    controller.delete_drive(controller.get_drive_by(
        {Drive.id: drive_id})[0])
    await callback_query.message.delete()
    await bot.send_message(callback_query.from_user.id,
                           "–í–∏–¥–∞–ª–µ–Ω–æ", reply_markup=Keyboard.menu("–Ø –í–æ–¥—ñ–π"))
    await callback_query.answer()


@dp.callback_query_handler(Text(startswith="edit"), state="*")
async def edit_drive(callback_query: types.CallbackQuery, state: FSMContext):
    drive_id = callback_query.data.split('_')[1]
    async with state.proxy() as data:
        data['current_drive'] = drive_id
        data['editing'] = True
    await callback_query.message.answer('–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?',
                                        reply_markup=Buttons.edit_menu)
    await callback_query.answer()


@dp.callback_query_handler(Text(equals='date_edit'))
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —É\
—Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–† –ì–ì:–•–•")
    await States.date.set()


@dp.callback_query_handler(Text(equals='route'), state="*")
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ó–≤—ñ–¥–∫–∏ –ø—Ä—è–º—É—î—Ç–µ",
                                           reply_markup=Buttons.select_region(nowhere=False))
    await States.from_drive.set()


@dp.callback_query_handler(Text(equals='com_edit'), state="*")
async def edit_date(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ö–æ–º–µ–Ω—Ç–∞—Ä")
    await States.comment.set()


@dp.callback_query_handler(Text(equals='pass_count'), state="*")
async def edit_pass_count(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∞—Å–∞–∂–∏—Ä—ñ–≤")
    await States.max_pass.set()

'''For user'''


@dp.message_handler(Text(equals="–®—É–∫–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É"), state="*")
async def passenger_menu(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    await message.answer("""
‚ö†Ô∏è –ù–ï –ù–ê–î–°–ò–õ–ê–ô–¢–ï –ü–ï–†–ï–î–û–ü–õ–ê–¢–£ ‚ö†Ô∏è
–ü–∞–º‚Äô—è—Ç–∞–π—Ç–µ, –º–∞–π–∂–µ —É—Å—ñ –ø–µ—Ä–µ–≤—ñ–∑–Ω–∏–∫–∏ –±–µ—Ä—É—Ç—å –∫–æ—à—Ç–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∏ –≥–æ—Ç—ñ–≤–∫–æ—é üá∫üá¶üí∞""",
                         reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))
    user = controller.get_or_create_user(message.from_user.id)[0]
    if not user.place_from:
        await message.answer("""
üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ, –∑ —è–∫–æ–≥–æ –≤–∏ –±—É–¥–µ—Ç–µ –≤–∏—ó–∂–¥–∂–∞—Ç–∏, —â–æ–± –ª—é–¥–∏ –ø–æ—Ä—É—á –∑–º–æ–≥–ª–∏ –≤–∞—Å –∑–Ω–∞–π—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ –º–∞—î –≤–∞—à–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä üëá
""",
                             reply_markup=Buttons.select_region())
        await States.settings_from.set()
    else:

        drives = controller.get_drive_by({
            Drive.place_from: user.place_from,
            Drive.place_to: user.place_to},
            places=user.num_of_passengers)
        if not drives:
            await message.answer("""
–ù–∞–∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫ –∑–∞ –≤–∞—à–∏–º –Ω–∞–ø—Ä—è–º–æ–º üòî

–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —É —Ä–æ–∑–¥—ñ–ª ¬´–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç¬ª —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º –≤–∞—à–æ—ó –ø–æ—ó–∑–¥–∫–∏ üëá

""", reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))
        else:
            for drive in drives:
                await message.answer(
                    generate_info(drive),
                    reply_markup=Keyboard.menu('–Ø –ü–∞—Å–∞–∂–∏—Ä'))


@dp.callback_query_handler(state=States.settings_from)
async def set_start(callback_query: types.CallbackQuery, state: FSMContext):
    #user = Controller.user_exist()
    if callback_query.data.startswith("page_"):
        page = callback_query.data.split("_")[1]
        await callback_query.message.edit_reply_markup(Buttons.select_region(
            nowhere=False, page=int(page)))
    elif callback_query.data.isdigit():
        async with state.proxy() as data:
            data['drive_from'] = callback_query.data
        await callback_query.message.edit_text("""
üìç –û–±–µ—Ä—ñ—Ç—å –Ω–∞–ø—Ä—è–º, –∫—É–¥–∏ –≤–∏ –ø–ª–∞–Ω—É—î—Ç–µ –ø–æ—ó—Ö–∞—Ç–∏

–Ø–∫—â–æ —É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î –±–∞–∂–∞–Ω–æ–≥–æ –º—ñ—Å—Ç–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Äüëá""",
                                               reply_markup=Buttons.select_region(nowhere=True))
        await callback_query.answer()
        await States.settings_to.set()
    else:
        await callback_query.answer()
        await States.settings_to.set()


@dp.callback_query_handler(state=States.settings_to)
async def set_finish(callback_query: types.CallbackQuery, state: FSMContext):

    await callback_query.answer()
    if callback_query.data.startswith("page_"):
        page = callback_query.data.split("_")[1]
        await callback_query.message.edit_reply_markup(Buttons.select_region(
            nowhere=False, page=int(page)))

    elif callback_query.data.isdigit():
        async with state.proxy() as data:
            data['drive_to'] = callback_query.data

        user = controller.get_or_create_user(
            callback_query.from_user.id)[0]
        if user.num_of_passengers:
            controller.edit_user(user,
                                 {'place_from': Buttons.regions_from[int(data['drive_from'])],
                                  'place_to': Buttons.regions_to[int(callback_query.data)]})
            await callback_query.message.edit_text("–û–Ω–æ–≤–ª–µ–Ω–æ!",
                                                   reply_markup=Buttons.find)
            await state.finish()

        else:
            await callback_query.message.edit_text("üë´ –°–∫—ñ–ª—å–∫–∏ –º—ñ—Å—Ü—å –≤ –∞–≤—Ç–æ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ? üëá",
                                                   reply_markup=None)
            await States.settings_pass.set()
    else:
        await callback_query.answer()
        await state.finish()


@dp.message_handler(state=States.settings_pass)
async def get_drives(message: types.Message, state: FSMContext):

    user = controller.get_or_create_user(message.from_user.id)[0]

    passengers = message.text
    if passengers.isdigit() and int(passengers) >= 1:
        if user.place_from:
            controller.edit_user(user,
                                 {'num_of_passengers': int(message.text)})
            await message.answer("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –æ–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∫–∞–∑–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è?",
                                 reply_markup=Buttons.find)
            await state.finish()
        else:
            async with state.proxy() as data:
                controller.edit_user(user,
                                     {'place_from': Buttons.regions_from[int(data['drive_from'])],
                                      'place_to': Buttons.regions_to[int(data['drive_to'])],
                                      'num_of_passengers': int(message.text)})

            await message.answer("–Ü–Ω—Ñ–æ–º–∞—Ü—ñ—è –ø—Ä–∏—Å—É—Ç–Ω—è.")
            await state.finish()
            drives = controller.get_drive_by({
                Drive.place_from: Buttons.regions_from[int(data['drive_from'])],
                Drive.place_to: Buttons.regions_to[int(data['drive_to'])]},
                places=int(message.text))
            for drive in drives:
                await message.answer(
                    generate_info(drive),
                    reply_markup=Keyboard.menu('–Ø –ü–∞—Å–∞–∂–∏—Ä'))
    else:
        await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —Ü–∏—Ñ—Ä—É, –±—ñ–ª—å—à—É –∑–∞ 0")


@dp.callback_query_handler(Text(equals='find_pass'))
async def choose_role(callback_query: types.CallbackQuery):
    await callback_query.answer()
    user = controller.get_or_create_user(callback_query.from_user.id)[0]
    drives = controller.get_drive_by({
        Drive.place_from: user.place_from,
        Drive.place_to: user.place_to},
        places=user.num_of_passengers)
    await callback_query.message.delete()
    if not drives:
        await bot.send_message(
            callback_query.from_user.id,
            """–ù–∞–∂–∞–ª—å, –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î –ø–æ—ó–∑–¥–æ–∫ –∑–∞ –≤–∞—à–∏–º –Ω–∞–ø—Ä—è–º–æ–º üòî

–í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ —É —Ä–æ–∑–¥—ñ–ª ¬´–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è¬ª —Ç–∞ –∑–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ø—Ä—è–º –≤–∞—à–æ—ó –ø–æ—ó–∑–¥–∫–∏üëá""")
    for drive in drives:
        if drive.departure_time > datetime.now():
            await bot.send_message(
                callback_query.from_user.id,
                generate_info(drive),
                reply_markup=Keyboard.menu('–Ø –ü–∞—Å–∞–∂–∏—Ä'))


@dp.message_handler(lambda message: message.text in ["–ó–º—ñ–Ω–∏—Ç–∏ –º–∞—Ä—à—Ä—É—Ç","–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø–æ—ó–∑–¥–∫–∏"], state="*")
async def settings(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    await message.answer("–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
                         reply_markup=Buttons.edit_data_menu)


@dp.message_handler(Text(equals="–í–∏–º–∫–Ω—É—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"), state="*")
async def notify(message: types.Message, state: FSMContext):
    if await state.get_state():
        await state.finish()
    user = controller.get_or_create_user(message.from_user.id)[0]
    if user.active_search:
        controller.edit_user(user,
                             {'active_search': False})
        await message.answer("–í–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∏–º–∫–Ω—É—Ç—ñ",
                             reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))
    else:
        controller.edit_user(user,
                             {'active_search': True})
        await message.answer("–í–∞—à—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω—ñ",
                             reply_markup=Keyboard.menu("–Ø –ü–∞—Å–∞–∂–∏—Ä"))


""" Editing user info """


@dp.callback_query_handler(Text(equals='nm_chng'), state="*")
async def change_name(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–º'—è")
    await callback_query.answer()
    await States.set_name.set()


@dp.callback_query_handler(Text(equals='ph_chng'))
async def change_name(callback_query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['editing'] = True
    await callback_query.message.answer("–í–∫–∞–∂—ñ—Ç—å —Å–ø–æ—Å—ñ–± –∑–≤'—è–∑–∫—É")
    await callback_query.answer()
    await States.set_number.set()


@dp.callback_query_handler(Text(equals='u_count'))
async def change_pass_count(callback_query: types.CallbackQuery):

    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å")
    await callback_query.answer()
    await States.settings_pass.set()


@dp.callback_query_handler(Text(equals='u_from'))
async def change_route_pass(callback_query: types.CallbackQuery):

    await callback_query.message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–æ—á–∫—É –≤–∏—ó–∑–¥—É",
                                        reply_markup=Buttons.select_region())
    await callback_query.answer()
    await States.settings_from.set()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)